BUBBLE SORT:-(TIME COMPLEXITY IS O[n^2] --- WHICH IS NOT A GOOD TIME COMPLEXITY
===========
public class bubblesort{
    public static void BasicSort(int num[]){
        for(int turn =0; turn<num.length-1; turn++){
            for(int j=0; j<num.length-1-turn; j++){
                if(num[j] > num[j+1]){

                    int temp = num[j];
                    num[j] = num[j+1];
                    num[j+1] = temp;
                }
            }
        }

    }
    public static void PrintArr(int num[]){
        for(int i=0; i<num.length; i++){
            System.out.println("The sorted array is:"+" "+num[i]);
        }
    } 
    public static void main(String args[]){
        int num[] ={2,5,1,6,7,4};
        BasicSort(num);
        PrintArr(num);
    } 
}
OUTPUT:-
=======
The sorted array is: 1
The sorted array is: 2
The sorted array is: 4
The sorted array is: 5
The sorted array is: 6
The sorted array is: 7
==========================================================================================================================================================================================================================
SELECTION SORT :-(CODE) (TIME COMPLEXITY IS O[n^2] --- WHICH IS NOT A GOOD TIME COMPLEXITY

public class selectionSort {
    public static void selectionSort(int arr[]){
        for(int i=0; i<arr.length-1; i++){
            int minpos = i;
            for(int j=i+1; j<arr.length; j++){
                if(arr[j] < arr[minpos]){
                    minpos = j;
                }
            }
            int temp = arr[i];
            arr[i] = arr[minpos];
            arr[minpos] = temp;
        }
    }

    public static void printArr(int arr[]){
        for(int i=0; i<arr.length; i++){
            System.out.println("The sorted array is: " + arr[i]);
        }
    }

    public static void main(String args[]){
        int arr[] ={2,5,7,1,3,4};
        selectionSort(arr);
        printArr(arr);
    }
}
OUTPUT:-
=======
The sorted array is: 1
The sorted array is: 2
The sorted array is: 3
The sorted array is: 4
The sorted array is: 5
The sorted array is: 7
======================================================================================================================================================================================================================
INSERTION SORT :- (CODE) (TIME COMPLEXITY IS O[n^2] --- WHICH IS NOT A GOOD TIME COMPLEXITY

public class insertionsort {
    public static void InsertionSort(int arr[]){
        for(int i=0; i<arr.length; i++){
            int curr = arr[i];
            int prev = i-1;
            while(prev >= 0 && arr[prev] > curr){
                arr[prev + 1] = arr[prev];
                prev--;
            }

            arr[prev + 1] = curr;
        }
    }
    public static void PrintArr(int arr[]){
        for(int i=0; i<arr.length; i++){
            System.out.println(arr[i]);
        }
    }
    public static void main(String args[]){
        int arr[] = {2,7,4,3,1};
        InsertionSort(arr);
        PrintArr(arr);
    }
}
OUTPUT:-
=======
The sorted array is: 1 
The sorted array is: 2
The sorted array is: 3
The sorted array is: 4
The sorted array is: 7
