Input and output in java:-
=========================
import java.util.Scanner;
public class arr{
    public static void main(String args[])
    {
        int marks[]=new int[5];
        try (Scanner sc = new Scanner(System.in)) {
            marks[0] = sc.nextInt();
            marks[1] = sc.nextInt();
            marks[2] = sc.nextInt();
        }
        System.out.println("phy: "+marks[0]);
        System.out.println("chem: "+marks[1]);
        System.out.println("math: "+marks[2]);
    }
}

==========================================================================================================================================================================================================================================
import java.util.Scanner;
public class arr{
    public static void main(String args[])
    {
        int marks[]=new int[5];
        try (Scanner sc = new Scanner(System.in)) {
            marks[0] = sc.nextInt();
            marks[1] = sc.nextInt();
            marks[2] = sc.nextInt();
        }
        System.out.println("phy: "+marks[0]);
        System.out.println("chem: "+marks[1]);
        System.out.println("math: "+marks[2]);
       
        int percentage = (marks[0] +  marks[1] + marks[2])/3;

        System.out.println("percentage= "+ percentage );

    }
}
Output:-
96
95
98
phy: 96
chem: 95
math: 98
percentage= 96
==========================================================================================================================================================================================================================================
Array as function arguement:-

public class refrence {
    public static void update(int marks[])
    {
        for(int i=0;i<marks.length;i++)
        {
            marks[i]=marks[i]+1;
        }
    }
    public static void main(String args[])
    {
        int marks[]={98,97,96};
        update(marks);
        for(int i=0;i<marks.length;i++)
        {
            System.out.println(marks[i]+" ");
        }
    }
   
}
Ouptut:-
99 
98 
97
===========================================================================================================================================================================================================================================
Linear Search:-
public class linearsearch {
    public static int LinearSearch(int num[],int key){
        for(int i=0;i<num.length;i++)
        {
            if(num[i]==key)
            {
                return i;
            }
        }
        return -1;
    }
    public static void main(String args[]){
         int num[]={2,4,6,8,10,12,14};
         int key=14;
        int index= LinearSearch(num,key);
         if(index==-1)
         {
            System.out.println("Not Found");
         }
         else{
            System.out.println("Key is at index:"+index);
         }

    }
}
Output:-
=======
Key is at index:6
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
public class linearsearch {
    public static int LinearSearch(int num[],int key){
        for(int i=0;i<num.length;i++)
        {
            if(num[i]==key)
            {
                return i;
            }
        }
        return -1;
    }
    public static void main(String args[]){
         int num[]={2,4,6,8,10,12,14};
         int key=25;
        int index= LinearSearch(num,key);
         if(index==-1)
         {
            System.out.println("Not Found");
         }
         else{
            System.out.println("Key is at index:"+index);
         }

    }
}
Output:-
=======
Not Found
================================================================================================================================================================================================================================
Q) Find the largest number in a given array.

public class Bigvalue {
    public static int largestValue(int num[]){
        int largest = Integer.MIN_VALUE;
        for(int i=0; i<num.length; i++){
            if(largest<num[i]){
                largest = num[i];
            }
        }
        return largest;
    }
    public static void main(String args[]){
        int num[]={4,9,5,12,8,20};

        System.out.println("Largest value is :"+largestValue(num));
    }
}
Output:-
=======
Largest value is :20
=======================================================================================================================================================================================================================================
Q) Find the smallest number in a given array.

public class Smallvalue {
    public static int MinValue(int num[]){
        int minimum = Integer.MAX_VALUE;
        for(int i=0; i<num.length; i++){
            if(minimum>num[i]){
                minimum = num[i];
            }
        }
        return minimum;
    }
    public static void main(String args[]){
        int num[]={4,9,5,12,1,20,2};

        System.out.println("Smallest value is :"+MinValue(num));
    }
}
Output:-
=======
Smallest value is :1
=====================================================================================================================================================================================================================================
Binary Search program:-
public class binarysearch {

    public static int BinarySearch(int num[],int key)
    {
        int n=num.length;
        int low=0 , high=n-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(num[mid]==key){
                return mid;
            }
            if(num[mid]<key){
                low =mid+1;
            }
            else{
                high =mid-1;
            }

        }
        return -1;
    }
    public static void main(String args[]){
        int num[]={2,5,7,9,10,14,15};
        int key= 14;
         System.out.println("The key is found at index:"+ BinarySearch(num, key));
    }
}
Output:-
=======
The key is found at index:5
=======================================================================================================================================================================================================================================
Reverse Array program:-

public class reverse {
    public static int Reverse(int num[]){
        int first=0 , last=num.length-1;
        while(first<last){
            int temp = num[last];
            num[last] = num[first];
            num[first] = temp;

            first++;
            last--;
        }
        return last;
    }
    public static void main(String args[]){
        int num[]={3,6,9,12,15,18};

        Reverse(num);

        for(int i=0; i<num.length; i++){
            System.out.print(num[i]+" ");
        }

    }
    
}
Output:-
=======
18 15 12 9 6 3 
========================================================================================================================================================================================================================================
Q) Pair the elements in a sorted array.

public class pairarray {
    public static void pairArray(int num[]){
        for(int i=0; i<num.length; i++){
            int curr = num[i];
            for(int j=i+1; j<num.length;j++){
               System.out.print("(" + curr + "," + num[j] + ")");
            }
            System.out.println();
        }
    }
    public static void main(String args[]){
        int num[] = {3,6,9,12,15,18};
        pairArray(num);
    }
}

Output:-
=======

(3,6)(3,9)(3,12)(3,15)(3,18)
(6,9)(6,12)(6,15)(6,18)
(9,12)(9,15)(9,18)
(12,15)(12,18)
(15,18)
======================================================================================================================================================================================================================================
Calculating total pairs:-In the above code

public class pairarray {
    public static void pairArray(int num[]){
        int totalpair =0;
        for(int i=0; i<num.length; i++){
            int curr = num[i];
            for(int j=i+1; j<num.length;j++){
               System.out.print("(" + curr + "," + num[j] + ")");
               totalpair++;
            }
            System.out.println();
        }
        System.out.println("Total Pairs are:"+ totalpair);
    }
    public static void main(String args[]){
        int num[] = {3,6,9,12,15,18};
        pairArray(num);
    }
}

Output:-
=======
(3,6)(3,9)(3,12)(3,15)(3,18)
(6,9)(6,12)(6,15)(6,18)
(9,12)(9,15)(9,18)
(12,15)(12,18)
(15,18)

Total Pairs are:15
===========================================================================================================================================================================================================================================

**To find total pair by using the A.P Formula----

public class pairarray {
    public static void pairArray(int num[]) {
        int totalPairs = 0;
        int n = num.length;

        totalPairs = n * (n - 1) / 2;  //Formula

        for (int i = 0; i < n; i++) {
            int curr = num[i];

            for (int j = i + 1; j < n; j++) {
                System.out.print("(" + curr + "," + num[j] + ")");
            }
            System.out.println();
        }

        System.out.println("Total Pairs are:" + totalPairs);
    }

    public static void main(String args[]) {
        int num[] = {3, 6, 9, 12, 15, 18};
        pairArray(num);
    }
}

Output:-
=======
(3,6)(3,9)(3,12)(3,15)(3,18)
(6,9)(6,12)(6,15)(6,18)
(9,12)(9,15)(9,18)
(12,15)(12,18)
(15,18)

Total Pairs are:15
===================================================================================================================================================================================================================================
Q) Print Sub arrays.

public class subarray {

    public static void printSubArray(int num[]){
        for(int i=0; i<num.length; i++){
            int start = i;
            
            for(int j=i; j<num.length; j++){
                int end = j;

                for(int k= start; k<=end; k++){

                    System.out.print(num[k]+" ");
                }
                System.out.println();
            }
            System.out.println();
        }

    }
    public static void main(String args[]){
        int num[]={2,4,6,8,10};
        printSubArray(num);
    }
    
}

Output:-
=======
2 
2 4
2 4 6
2 4 6 8
2 4 6 8 10

4
4 6
4 6 8
4 6 8 10

6
6 8
6 8 10

8
8 10

10
============================================================================================================================================================================================================================

****Updated above question finding total number of sub arrays.

public class subarray {

    public static void printSubArray(int num[]){ 
        int n = num.length;
         int totalsb = n*(n+1)/2;
        for(int i=0; i<n; i++){
           
            int start = i;
            
            for(int j=i; j<n; j++){
                int end = j;

                for(int k= start; k<=end; k++){

                    System.out.print(num[k]+" ");
                }
               
                System.out.println();
            }
            System.out.println();
        }
         System.out.println("total sub arrays are:"+totalsb);
    }
    public static void main(String args[]){
        int num[]={2,4,6,8,10};
        printSubArray(num);
    }
    
}

Output:-
=======
2 
2 4
2 4 6
2 4 6 8
2 4 6 8 10

4
4 6
4 6 8
4 6 8 10

6
6 8
6 8 10

8
8 10

10

total sub arrays are:15

=====================================================================================================================================================================================================================================
Q)Print the sum of maximum sub array.(*Brute Force*).

 public class maxsub {

    public static void MaxSubarrSum(int num[]){ 
           
            int currsum = 0;
            int maxsum = Integer.MIN_VALUE;
             for(int i=0; i<num.length; i++){
                int start = i;
            
            for(int j=i; j<num.length; j++){
                int end = j;
                currsum = 0;
                for(int k= start; k<=end; k++){

                    currsum += num[k];
                    
                   
                }
                System.out.println("The sum of every sub array is:"+currsum);
                if(maxsum<currsum)
                {
                    maxsum = currsum;
                }
               
                System.out.println();
            }
          
        }
         System.out.println("maximum sum is:"+maxsum);
    }
    public static void main(String args[]){
        int num[]={2,4,6,8,10};
        MaxSubarrSum(num);
    }
    
}
Output:-
=======
The sum of every sub array is:2

The sum of every sub array is:6

The sum of every sub array is:12

The sum of every sub array is:20

The sum of every sub array is:30

The sum of every sub array is:4

The sum of every sub array is:10

The sum of every sub array is:18

The sum of every sub array is:28

The sum of every sub array is:6

The sum of every sub array is:14

The sum of every sub array is:24

The sum of every sub array is:8

The sum of every sub array is:18

The sum of every sub array is:10

maximum sum is:30
=======================================================================================================================================================================================================================================
Q)Print the sum of maximum sub array.(*Prefix array*).

public class MaxSubarraySum {

    public static void maxSubarraySum(int num[]) {

        int currSum = 0;
        int maxSum = Integer.MIN_VALUE;

        int[] prefix = new int[num.length];

        prefix[0] = num[0];

        for (int i = 1; i < num.length; i++) {
            prefix[i] = prefix[i - 1] + num[i];
        }

        for (int i = 0; i < num.length; i++) {
            int start = i;
            for (int j = i; j < num.length; j++) {
                
                int end = j;

                currSum = start == 0 ? prefix[end] : prefix[end] - prefix[start - 1];

                if (maxSum < currSum) {
                    maxSum = currSum;
                }
            }
        }
        System.out.println("Maximum sum is: " + maxSum);
    }

    public static void main(String args[]) {
        int num[] = {1, -2, 6, -1, 3};
        maxSubarraySum(num);
    }
}

Output:-
=======
Maximum sum is: 8
=================================================================================================================================================================================================================================

**KADANES MAXIMUM SUM PRINT**

public class kadanes {
    public static void maxkadanes(int num[]){
        int currSum = 0;
        int maxsum = Integer.MIN_VALUE;
        for(int i=0; i<num.length; i++){
            currSum = currSum + num[i];
            if(currSum<0){
                currSum=0;
            }
           maxsum = Math.max(maxsum, currSum);
        }
        System.out.println("The maximum sum is:"+maxsum);
    }
    public static void main(String args[]){
  int num[] ={-2,-3,4,-1,-2,1,5,-3};
      maxkadanes(num);
    }
}

Output:-
=======
The maximum sum is:7
=====================================================================================================================================================================================================================================

****Trapped water Code****(Brute force):-

public class trappedwater {
    
    public static int TrappedWater(int height[]) {
        int n = height.length;
        if (n <= 2) {
            return 0; // Cannot trap water with less than 3 bars
        }

        int[] leftMax = new int[n];
        leftMax[0] = height[0];

        // Calculate left max heights
        for (int i = 1; i < n; i++) {
            leftMax[i] = Math.max(leftMax[i-1], height[i]);
        }

        int[] rightMax = new int[n];
        rightMax[n-1] = height[n-1];

        // Calculate right max heights
        for (int j = n-2; j >= 0; j--) {
            rightMax[j] = Math.max(rightMax[j+1], height[j]);
        }

        int trappedWater = 0;

        // Calculate trapped water for each bar
        for (int i = 0; i < n; i++) {
            int waterLevel = Math.min(leftMax[i], rightMax[i]);
            trappedWater += waterLevel - height[i];
        }

        return trappedWater;
    }

    public static void main(String args[]) {
        int height[] = {6,2,1,0,4,8,2};
        int result = TrappedWater(height);
        System.out.println("Trapped Water: " + result);
    }
}

Output:-
=======
Trapped Water: 17

====================================================================================================================================================================================================================================

**BEST TIME TO BUY AND SELL STOCK**   
==================================
public class stockprofit {
    public static int buySellStock(int price[]) {
        int buyPrice = Integer.MAX_VALUE;
        int maxProfit = 0;

        for (int i = 0; i < price.length; i++) {
            if (price[i] > buyPrice) {
                int profit = price[i] - buyPrice;
                maxProfit = Math.max(maxProfit, profit);
            } else {
                buyPrice = price[i];
            }
        }
        return maxProfit;
    }

    public static void main(String args[]) {
        int price[] = {5, 7, 3, 4, 8, 10, 2};
        System.out.println("Profit is: " + buySellStock(price));
    }
}

Output:-
=======
Profit is: 7

======================================================================================================================================================================================================================================

ASSIGNMENT ARRAY QUESTIONS:-

publis static boolean Duplicate(int num[]){

for(int i =0; i<num.length; i++){
    for(int j=i+1; j<num.length; j++){
        if{num[i] == num[j]){
              return True;
        }
     }
  }
return False;
}
publis static void main(String args[])
{
    int num[] = {2,4,3,4,1,6};
     System.out.println(Duplicate(num));
}

Output:-
=======
True

-------------------------------------------------------------------------------------------------------------------------------------------
